dnl Process this file with autoconf to produce a configure script.

dnl
dnl configure.in for the Cyrus imapd
dnl $Id: configure.in,v 1.151 2000/01/28 22:09:39 leg Exp $
dnl

AC_INIT(imap/imapd.c)

AC_CHECK_PROG(MAKEDEPEND,makedepend,makedepend,[`cd ${srcdir};pwd`/tools/not-mkdep])
if test "$MAKEDEPEND" != "makedepend"; then
        AC_MSG_WARN([Makedepend is not installed on this system.  You should compile and install the version from the makedepend subdirectory.])
fi

AC_ARG_WITH(login,,AC_ERROR([--with-login is no longer supported.
Configure SASL appropriately instead.]))

AC_ARG_WITH(cyrus-prefix,[  --with-cyrus-prefix=DIR    use DIR as cyrus install directory],
	cyrus_prefix="$withval",cyrus_prefix="/usr/cyrus")
AC_SUBST(cyrus_prefix)
AC_ARG_WITH(cyrus-user,[  --with-cyrus-user=USERID   use USERID cyrus userid],
	cyrus_user="$withval",cyrus_user="cyrus")
AC_SUBST(cyrus_user)
AC_DEFINE_UNQUOTED(CYRUS_USER, "$cyrus_user")
AC_ARG_WITH(cyrus-group,[  --with-cyrus-group=GROUPID use GROUPID cyrus group],
	cyrus_group="$withval",cyrus_group="mail")
AC_SUBST(cyrus_group)
AC_ARG_WITH(statedir,[  --with-statedir=DIR     use DIR as state directory],
	statedir="$withval",statedir="/var")
AC_DEFINE_UNQUOTED(STATEDIR,"$statedir")

AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_AIX
AC_ISC_POSIX
AC_PROG_AWK
AC_C_CONST
AC_SYS_LONG_FILE_NAMES
if test $ac_cv_sys_long_file_names = no; then
	AC_MSG_ERROR(The Cyrus IMAPD requires support for long file names)
fi

dnl check for -R, etc. switch
CMU_GUESS_RUNPATH_SWITCH
dnl let's just link against local.  otherwise we never find anything useful.
CPPFLAGS="-I/usr/local/include ${CPPFLAGS}"
CMU_ADD_LIBPATH("/usr/local/lib")

AC_CHECK_HEADERS(unistd.h sys/select.h sys/param.h)
AC_REPLACE_FUNCS(memmove strcasecmp ftruncate strerror)
AC_HEADER_DIRENT

dnl this is to check for time things for sieve
AC_STRUCT_TM
AC_STRUCT_TIMEZONE

AC_SUBST(CPPFLAGS)
AC_SUBST(PRE_SUBDIRS)
AC_SUBST(EXTRA_SUBDIRS)
AC_SUBST(DEPLIBS)
AC_SUBST(LOCALDEFS)
AC_FUNC_VPRINTF

sievedir="sieve"
AC_ARG_ENABLE(sieve,
        [  --disable-sieve         disable Sieve support],
	if test "$enableval" = no; then
 		sievedir="no"
	fi)

if test "$sievedir" != "no"; then
	SIEVE_LIBS="../${sievedir}/libsieve.a"
	AC_SUBST(SIEVE_LIBS)
	SIEVE_CPPFLAGS="-I\$(srcdir)/../$sievedir"
	AC_SUBST(SIEVE_CPPFLAGS)
	AC_DEFINE(USE_SIEVE)

	dnl Sieve configure stuff
	AC_PROG_YACC
	AC_PROG_LEX
	AC_CHECK_LIB(fl,main)

	PRE_SUBDIRS="${PRE_SUBDIRS} $sievedir"
	EXTRA_OUTPUT="${EXTRA_OUTPUT} $sievedir/Makefile"
fi

dnl for timsieved
if test "$sievedir" != "no"; then
	EXTRA_SUBDIRS="${EXTRA_SUBDIRS} timsieved"
	EXTRA_OUTPUT="${EXTRA_OUTPUT} timsieved/Makefile"

	EXTRA_SUBDIRS="${EXTRA_SUBDIRS} installsieve"
	EXTRA_OUTPUT="${EXTRA_OUTPUT} installsieve/Makefile"
fi

dnl for et routines
AC_FUNC_CHECK(strerror,AC_DEFINE(HAS_STRERROR),AC_DEFINE(NEED_SYS_ERRLIST))

dnl Bunch of setproctitle stuff
spt_type=""
AC_CHECK_FUNC(setproctitle,spt_type=SPT_BUILTIN)
if test "$spt_type" = ""; then
	dnl BSD/OS and FreeBSD put it in -lutil
	AC_CHECK_LIB(util,setproctitle,spt_type=SPT_BUILTIN
			LIBS="${LIBS} -lutil")
fi
if test "$spt_type" = ""; then
	AC_CHECK_HEADER(sys/pstat.h,spt_type=SPT_PSTAT)
fi
if test "$spt_type" = ""; then
	AC_CHECK_HEADER(sys/sysnews.h,spt_type=SPT_SYSMIPS)
fi
if test "$spt_type" = ""; then
	AC_MSG_CHECKING(for PS_STRINGS)
	AC_CACHE_VAL(cyrus_cv_sys_psstrings, AC_TRY_CPP([
#include <machine/vmparam.h>
#include <sys/exec.h>
#ifndef PS_STRINGS
#include </nonexistent>
#endif],cyrus_cv_sys_psstrings=yes,cyrus_cv_sys_psstrings=no))
	if test $cyrus_cv_sys_psstrings = yes; then
		spt_type=SPT_PSSTRINGS
	fi
	AC_MSG_RESULT($cyrus_cv_sys_psstrings)
fi
if test "$spt_type" = ""; then
	AC_MSG_CHECKING(for SCO)
	AC_CACHE_VAL(cyrus_cv_sys_sco, AC_TRY_CPP([
#ifndef _SCO_unix_
#include </nonexistent>
#endif],cyrus_cv_sys_sco=yes,cyrus_cv_sys_sco=no))
	if test $cyrus_cv_sys_sco = yes; then
		spt_type=SPT_SCO
	fi
	AC_MSG_RESULT($cyrus_cv_sys_sco)
fi
if test "$spt_type" = ""; then
	AC_MSG_CHECKING(for setproctitle usability)
	AC_CACHE_VAL(cyrus_cv_sys_setproctitle, AC_TRY_CPP([
#if defined(DGUX) || defined(_SEQUENT_) || defined(apollo)
#include </nonexistent>
#endif],cyrus_cv_sys_setproctitle=yes,cyrus_cv_sys_setproctitle=no))
	if test $cyrus_cv_sys_setproctitle = no; then
		spt_type=SPT_NONE
	fi
	AC_MSG_RESULT($cyrus_cv_sys_setproctitle)
fi
if test "$spt_type" != ""; then
	AC_DEFINE_UNQUOTED(SPT_TYPE,$spt_type)
fi

AC_MSG_CHECKING(nonblocking method)
AC_CACHE_VAL(cyrus_cv_sys_nonblock,AC_TRY_LINK([#include <sys/types.h>
#include <sys/file.h>
#include <fcntl.h>
#ifndef	FNDELAY
#define FNDELAY		O_NDELAY
#endif],[fcntl(0, F_GETFL, 0)&FNDELAY],
cyrus_cv_sys_nonblock=fcntl,cyrus_cv_sys_nonblock=ioctl))
WITH_NONBLOCK=$cyrus_cv_sys_nonblock
AC_SUBST(WITH_NONBLOCK)
AC_MSG_RESULT($WITH_NONBLOCK)

AC_MSG_CHECKING(timezone GMT offset method)
AC_CACHE_VAL(cyrus_cv_struct_sys_gmtoff,AC_TRY_COMPILE([
#include <time.h>],[struct tm tm;
tm.tm_gmtoff = 0;
],cyrus_cv_struct_sys_gmtoff=tm,cyrus_cv_struct_sys_gmtoff=gmtime))
WITH_GMTOFF=$cyrus_cv_struct_sys_gmtoff
AC_SUBST(WITH_GMTOFF)
AC_MSG_RESULT($WITH_GMTOFF)
AC_MSG_CHECKING(for shared mmap)
AC_CACHE_VAL(cyrus_cv_func_mmap_shared,AC_TRY_RUN([
#include <sys/types.h>
#include <sys/mman.h>
#include <fcntl.h>
main() {
char *base;
int fd = open("conftestmmap", O_RDWR|O_CREAT|O_TRUNC, 0666);
if (fd == -1) exit(1);
if (write(fd, "test", 4) != 4) exit(1);
fsync(fd);
base = mmap((caddr_t)0, 100, PROT_READ, MAP_SHARED
#ifdef MAP_FILE
| MAP_FILE
#endif
#ifdef MAP_VARIABLE
| MAP_VARIABLE
#endif
, fd, 0L);
if (base == (caddr_t)-1) exit(1);
if (strncmp(base, "test", 4) != 0) exit(1);
if (write(fd, "test", 4) != 4) exit(1);
fsync(fd);
if (strncmp(base+4, "test", 4) != 0) exit(1);
exit(0);}
],cyrus_cv_func_mmap_shared=yes,cyrus_cv_func_mmap_shared=no,
cyrus_cv_func_mmap_shared=no))
AC_MSG_RESULT($cyrus_cv_func_mmap_shared)
if test $cyrus_cv_func_mmap_shared = yes; then
	WITH_MAP="shared"
else
AC_MSG_CHECKING(for stupid shared mmap)
AC_CACHE_VAL(cyrus_cv_func_mmap_stupidshared,AC_TRY_RUN([
#include <sys/types.h>
#include <sys/mman.h>
#include <fcntl.h>
main() {
char *base;
int fd = open("conftestmmap", O_RDWR|O_CREAT|O_TRUNC, 0666);
if (fd == -1) exit(1);
if (write(fd, "test", 4) != 4) exit(1);
fsync(fd);
base = mmap((caddr_t)0, 4, PROT_READ, MAP_SHARED
#ifdef MAP_FILE
| MAP_FILE
#endif
#ifdef MAP_VARIABLE
| MAP_VARIABLE
#endif
, fd, 0L);
if (base == (caddr_t)-1) exit(1);
if (strncmp(base, "test", 4) != 0) exit(1);
lseek(fd, 0L, 0);	
if (write(fd, "xyzz", 4) != 4) exit(1);
fsync(fd);
if (strncmp(base, "xyzz", 4) != 0) exit(1);
exit(0);}
],cyrus_cv_func_mmap_stupidshared=yes,cyrus_cv_func_mmap_stupidshared=no,
cyrus_cv_func_mmap_stupidshared=no))
AC_MSG_RESULT($cyrus_cv_func_mmap_stupidshared)
if test $cyrus_cv_func_mmap_stupidshared = yes; then
	WITH_MAP="stupidshared"
else
	AC_MSG_CHECKING(for non-shared mmap)
	AC_CACHE_VAL(cyrus_cv_func_mmap_private,AC_TRY_RUN([
/* Verify the OS supports the memory mapping semantics needed by map_private
 * from John Myers <jgmyers@netscape.com>
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <fcntl.h>

#ifndef MAP_NORESERVE
#define MAP_NORESERVE 0
#endif

/* not on Linux */
#ifndef MAP_VARIABLE
#define MAP_VARIABLE 0
#endif

fatal(char *s)
{
    write(2, s, strlen(s));
    write(2, "\n", 1);
    unlink("conftestmmap");
    exit(1);
}

main() {
    int fd = open("conftestmmap", O_RDWR|O_CREAT|O_TRUNC, 0666);
    int fd2;
    char *base_shared, *base_private, *base_private2;

    if (fd == -1) fatal("cannot create test file");
    if (write(fd, "test", 4) != 4) fatal("cannot write test file");
    base_shared = mmap((caddr_t)0, 10000, PROT_READ,
	     MAP_SHARED | MAP_FILE| MAP_VARIABLE,
	     fd, 0L);
    if (base_shared == (caddr_t)-1) fatal("cannot create shared map");

    base_private = mmap((caddr_t)0, 4, PROT_READ,
	     MAP_PRIVATE | MAP_NORESERVE | MAP_FILE| MAP_VARIABLE,
	     fd, 0L);
    if (base_private == (caddr_t)-1) fatal("cannot create private map");

    base_private2 = mmap((caddr_t)0, 4, PROT_READ,
	     MAP_PRIVATE | MAP_NORESERVE | MAP_FILE| MAP_VARIABLE,
	     fd, 0L);
    if (base_private == (caddr_t)-1) fatal("cannot create private2 map");


    if (strncmp(base_shared, "test", 4) != 0) fatal("shared map does not match");
    if (strncmp(base_private, "test", 4) != 0) fatal("private map does not match");

    if (write(fd, "test", 4) != 4) fatal("cannot extend test file within page");
    fsync(fd);
    msync((caddr_t)base_shared, 10000, MS_INVALIDATE);


    if (munmap(base_private, 4)) fatal("cannot unmap private map");
    base_private = mmap((caddr_t)0, 8, PROT_READ,
	     MAP_PRIVATE | MAP_NORESERVE | MAP_FILE| MAP_VARIABLE,
	     fd, 0L);
    if (base_private == (caddr_t)-1) fatal("cannot create private map second time");

    if (strncmp(base_shared+4, "test", 4) != 0) fatal("shared map does not match within page");
    if (strncmp(base_private+4, "test", 4) != 0) fatal("private map does not match within page");

    fd2 = open("conftestmmap", O_RDWR, 0666);
    if (lseek(fd2, 0, 0) == -1) fatal("cannot seek second fd");
    if (write(fd2, "xyzy", 4) != 4) fatal("cannot write second fd");
    fsync(fd2);

    
    if (munmap(base_private, 8)) fatal("cannot unmap private map");
    base_private = mmap((caddr_t)0, 8, PROT_READ,
	     MAP_PRIVATE | MAP_NORESERVE | MAP_FILE| MAP_VARIABLE,
	     fd, 0L);
    if (base_private == (caddr_t)-1) fatal("cannot create private map third time");
    if (strncmp(base_private, "xyzy", 4) != 0) fatal("private map does not show change");


    {
	int i;
	for (i = 0; i < 9000; i++) {
	    if (write(fd, "test", 4) != 4) fatal("cannot extend test file outside page");
	}
    }
    msync((caddr_t)base_shared, 10000, MS_INVALIDATE);
    msync((caddr_t)base_private, 10000, MS_INVALIDATE);

    if (strncmp(base_shared+9000, "test", 4) != 0) fatal("shared map does not match beyond page");
#if 0
    if (strncmp(base_private+9000, "test", 4) != 0) fatal("private map does not match beyond page");
#endif
	
    unlink("conftestmmap");
    exit(0);
}
],cyrus_cv_func_mmap_private=yes,cyrus_cv_func_mmap_private=no,
cyrus_cv_func_mmap_private=no))
	AC_MSG_RESULT($cyrus_cv_func_mmap_private)

	if test $cyrus_cv_func_mmap_private = yes; then
		AC_MSG_WARN(*** mmap() does not adequately support shared memory)
		AC_MSG_WARN(*** Expect a performance penalty)
		WITH_MAP=private
	else
		AC_MSG_WARN(*** This system does not have a working mmap())
		AC_MSG_WARN(*** Expect a considerable performance penalty)
		WITH_MAP=nommap
	fi
fi
fi

AC_SUBST(WITH_MAP)
AC_ARG_WITH(lock,[  --with-lock=METHOD      force use of METHOD for locking
                          METHOD is flock or fcntl],WITH_LOCK="$withval",
	AC_CHECK_FUNC(flock,WITH_LOCK="flock",WITH_LOCK="fcntl"))
AC_SUBST(WITH_LOCK)

dnl for makedepend and AFS.
cant_find_sigvec=no
AC_CACHE_VAL(cyrus_sigveclib,[
 dnl bsd classic flavor
 AC_CHECK_FUNC(sigvec, [
	cyrus_sigveclib=""
  ], [
  dnl hp flavor
  AC_CHECK_LIB(BSD, sigvec, cyrus_sigveclib="-lBSD", [
    dnl not hp flavor
    SAVE_LDFLAGS="$LDFLAGS"
    dnl solaris flavor
    LDFLAGS="-L/usr/ucblib -R/usr/ucblib $LDFLAGS"
    AC_CHECK_LIB(ucb, sigvec, [
      dnl more solaris flavor
      cyrus_sigveclib="-lc -L/usr/ucblib -R/usr/ucblib -lucb"],
      [ cant_find_sigvec=yes ])
    LDFLAGS="$SAVE_LDFLAGS"])
  ])
])
AC_SUBST(cyrus_sigveclib)

# ok, we still look for this stuff because of checking groups, but
# all authentication goes through SASL

AC_ARG_WITH(afs,[  --with-afs=PATH         use AFS libraries from PATH],
	[with_afs="${withval}"
	CFLAGS="${CFLAGS} -I${withval}/include"],with_afs="/usr/local")

AC_MSG_CHECKING(for Kerberos)
AC_CACHE_VAL(cyrus_cv_lib_kerberos,
  dnl /etc/kerberosIV/krb.conf is FreeBSD's fault.
  if test -f /etc/krb.conf -o -f /etc/kerberosIV/krb.conf ; then
	cyrus_cv_lib_kerberos=yes
else
	cyrus_cv_lib_kerberos=no
fi)
AC_MSG_RESULT($cyrus_cv_lib_kerberos)

AC_ARG_WITH(auth,[  --with-auth=METHOD      use authorization module METHOD
                          METHOD is unix or krb],WITH_AUTH="$withval",
	if test -f /etc/krb.conf -o -f /etc/kerberosIV/krb.conf ; then
		WITH_AUTH="krb"
	else
		WITH_AUTH="unix"
	fi)
AC_SUBST(WITH_AUTH)
if test "$WITH_AUTH" = krb_pts; then
	EXTRA_SUBDIRS="${EXTRA_SUBDIRS} ptclient"
	EXTRA_OUTPUT="${EXTRA_OUTPUT} ptclient/Makefile"
	AC_DEFINE_UNQUOTED(CYRUS_PATH,"$cyrus_prefix")
	AFS_LIBS="${with_afs}/lib/afs/libkauth.a ${with_afs}/lib/afs/libprot.a  ${with_afs}/lib/afs/libauth.a ${with_afs}/lib/afs/libsys.a ${with_afs}/lib/librxkad.a ${with_afs}/lib/librx.a ${with_afs}/lib/afs/libsys.a ${with_afs}/lib/libubik.a  ${with_afs}/lib/liblwp.a ${with_afs}/lib/afs/util.a"
	if test -f ${with_afs}/lib/afs/libaudit.a; then
		AFS_LIBS="$AFS_LIBS ${with_afs}/lib/afs/libaudit.a"
	fi
	if test -f /usr/ucblib/libucb.a; then
		CMU_ADD_LIBPATH_TO(/usr/ucblib, AFS_LDFLAGS)
		AFS_LIBS="$AFS_LIBS -lc -lucb"
	fi

	AC_CACHE_VAL(cyrus_afs_pr_end,[
		SAVE_LIBS="$LIBS"
		LIBS="$AFS_LIBS"
		AC_MSG_CHECKING(if AFS libraries have pr_End)
		AC_TRY_LINK([pr_End();],
			[pr_End()],
			[
				dnl it linked; have it
				AC_MSG_RESULT(yes)
				cyrus_afs_pr_end="yes"
			], [
				dnl didn't link; use old code
				AC_MSG_RESULT(no)
				cyrus_afs_pr_end="no"
			])
		])
	LIBS="$SAVE_LIBS"
	if test "$cyrus_afs_pr_end" = no; then
		AC_DEFINE(HAVE_PR_END)
	fi
	AC_CACHE_VAL(cyrus_afs_sigvec,[
		SAVE_LIBS="$LIBS"
		LIBS="${with_afs}/lib/liblwp.a"
		AC_MSG_CHECKING(if AFS libraries need sigvec)
		dnl Does AFS need sigvec?  We have to link against lwp and see
		dnl if IOMGR_Initialize wants it
		AC_TRY_LINK([IOMGR_Initialize();],
			[IOMGR_Initialize()],
			[
				dnl it linked; don't need it
				AC_MSG_RESULT(no)
				cyrus_afs_sigvec="no"
			], [
				dnl didn't link; pick up sigvec
				AC_MSG_RESULT(yes)
				cyrus_afs_sigvec="yes"
			])
		])
	if test "$cyrus_afs_sigvec" = yes; then
	  if test "$cant_find_sigvec" = yes; then
            AC_MSG_WARN([Can't find a sigvec for AFS libraries which seem to])
	    AC_MSG_WARN([need one; ptloader may not build.])
          else
	    AFS_LIBS="${AFS_LIBS} $cyrus_sigveclib"
	  fi
	fi
	LIBS="$SAVE_LIBS"
	AC_SUBST(AFS_LIBS)
	AC_SUBST(AFS_LDFLAGS)
fi

TCL_SUBDIRS="cyradm"
AC_ARG_ENABLE(cyradm,
	[  --disable-cyradm        disable compling cyradm],
	if test "$enableval" = no; then
		TCL_SUBDIRS=""
	fi)		
if test -n "$TCL_SUBDIRS"; then	
	EXTRA_OUTPUT="${EXTRA_OUTPUT} cyradm/Makefile"
fi
AC_SUBST(TCL_SUBDIRS)

SERVER_SUBDIRS="imap"
AC_ARG_ENABLE(server,
	[  --disable-server        disable compiling servers],
	if test "$enableval" = no; then
        	SERVER_SUBDIRS=""
	fi)
AC_SUBST(SERVER_SUBDIRS)
# We always output a server makefile (just because we can)

dnl To link against Tcl, configure does several things to make my life
dnl "easier".
dnl
dnl * maybe ask the user where they think Tcl lives, and try to find it
dnl * maybe ask the user what "tclsh" is called this week (i.e., "tclsh8.0")
dnl * run tclsh, ask it for a path, then run that path through sed
dnl * sanity check its result (many installs are a little broken)
dnl * try to figure out where Tcl is based on this result
dnl * try to guess where the Tcl include files are
dnl
dnl XXX MUST CHECK FOR TCL BEFORE KERBEROS V4 XXX
dnl This is because some genius at MIT named one of the Kerberos v4
dnl library functions log().  This of course conflicts with the
dnl logarithm function in the standard math library, used by Tcl.
dnl
dnl Checking for Tcl first puts -lm before -lkrb on the library list.
dnl
dnl Check for some information from the user
AC_ARG_WITH(tclconfig,[  --with-tclconfig=PATH   use tclConfig.sh from PATH
                          (configure gets Tcl configuration from here)],
        dnl trim tclConfig.sh off the end so we can add it back on later.
	TclLibBase=`echo ${withval} | sed s/tclConfig.sh\$//`)
AC_ARG_WITH(tcl,      [  --with-tcl=PATH         use Tcl from PATH],
	TclLibBase="${withval}/lib")
AC_ARG_WITH(tclsh,    [  --with-tclsh=TCLSH      use TCLSH as the tclsh program
                          (let configure find Tcl using this program)],
	TCLSH="${withval}")
dnl $TCL_SUBDIRS is nonempty if we are using Tcl.
if test "$TCL_SUBDIRS" != ""; then

  if test -z "$TclLibBase"; then # do we already know?
    # No? Run tclsh and ask it where it lives.

    # Do we know where a tclsh lives?
    if test -z "$TCLSH"; then
      # Try and find tclsh.  Any tclsh.
      # If a new version of tcl comes out and unfortunately adds another
      # filename, it should be safe to add it (to the front of the line --
      # somef vendors have older, badly installed tclshs that we want to avoid
      # if we can)
      AC_PATH_PROGS(TCLSH, [tclsh8.1 tclsh8.0 tclsh], "unknown")
    fi

    # Do we know where to get a tclsh?
    if test "${TCLSH}" != "unknown"; then
      AC_MSG_CHECKING([where Tcl says it lives])
      TclLibBase=`echo puts \\\$tcl_library | ${TCLSH} | sed -e 's,[^/]*$,,'`
      AC_MSG_RESULT($TclLibBase)
    fi
  fi

  if test -z "$TclLibBase" ; then

    AC_MSG_RESULT([can't find tclsh])

    AC_MSG_WARN([The "tclsh" program could not be found in your PATH.])
    AC_MSG_WARN([Tcl is required for building cyradm.])
    AC_MSG_WARN([You should use --with-tclsh (or one of the other switches])
    AC_MSG_WARN([configure has for specifying the location of Tcl)])
    AC_MSG_WARN([or configure with --disable-cyradm to not build it.])

    AC_MSG_ERROR([Help configure find Tcl or use --disable-cyradm.])

  else
    AC_MSG_CHECKING([for tclConfig.sh])
    # Check a list of places where the tclConfig.sh file might be.
    for tcldir in "${TclLibBase}" \
                  "${TclLibBase}/.." \
		  "${TclLibBase}"`echo ${TCLSH} | sed s/sh//` ; do
      if test -f "${tcldir}/tclConfig.sh"; then
        TclLibBase="${tcldir}"
        break
      fi
    done
    AC_MSG_RESULT(${TclLibBase}/)

    if test -z "${TclLibBase}" ; then
      AC_MSG_RESULT("unknown")
      AC_MSG_WARN([tclsh was found, but tclConfig.sh could not be located.])
      AC_MSG_WARN([See the --with-tclconfig option if your Tcl is ver >=7.5])
      AC_MSG_WARN([(This means your tclConfig.sh is probably in a weird])
      AC_MSG_WARN([place.)])
      AC_MSG_ERROR([Can't find tclConfig.sh; use --with-tclconfig])
    fi

    AC_MSG_CHECKING([with Tcl on how it says it should be compiled])
    . ${TclLibBase}/tclConfig.sh
    AC_MSG_RESULT(ok)
    dnl no TK stuff for us.
    dnl . ${TclLibBase}/tkConfig.sh

    dnl Now, hunt for the Tcl include files, since we don't strictly
    dnl know where they are; some folks put them (properly) in the 
    dnl default include path, or maybe in /usr/local; the *BSD folks
    dnl put them in other places.
    AC_MSG_CHECKING([where Tcl includes are])
    for tclinclude in "${TCL_PREFIX}/include/tcl${TCL_VERSION}" \
                      "${TCL_PREFIX}/include/tcl" \
                      "${TCL_PREFIX}/include" ; do
      if test -r "${tclinclude}/tcl.h" ; then
        TCL_CPPFLAGS="-I${tclinclude}"
        break
      fi
    done
    AC_MSG_RESULT(${TCL_CPPFLAGS})

    dnl TCL_LIBS="${TK_LIB_SPEC} ${TK_XLIBSW} ${TCL_LD_SEARCH_FLAGS} ${TCL_LIB_SPEC}"
    TCL_LIBS="${TCL_LD_SEARCH_FLAGS} ${TCL_LIB_SPEC} ${TCL_LIBS}"

    AC_SUBST(TCL_DEFS)dnl
    AC_SUBST(TCL_LIBS)dnl
    AC_SUBST(TCL_CPPFLAGS)dnl
  fi
fi

dnl
dnl because of snprintf problems, we have to do this before kerberos checks,
dnl then put krb libs at front of line
dnl

AC_CHECK_LIB(db, db_create, [AC_DEFINE(HAVE_LIBDB)
       	                     LIBS=" -ldb ${LIBS}"
                	     use_db=1],
AC_ERROR([this version required Berkeley DB 3.x.
          (Get it from http://www.sleepycat.com/.)]))

AC_ARG_ENABLE(static-libraries,
        [  --static-libraries      compile with avalible static libraries (EXPERIMENTAL)],
	[if test "$enableval" = yes; then
		cmu_compile_with_static_libs=yes

echo "WARNING: You have enabled the --enable-static-libraries switch."
echo "         This is very experimental and may only work for certain"
echo "         system types at CMU.  We do not expect this to be portable"
echo "         (yet).  This switch affects only some binaries."

	fi], [	cmu_compile_with_static_libs=no ]
)

dnl Libraries Kerberos may depend on.  Some of these may be implicit
dnl dependancies if shared libraries are involved, but we detect them anyway
dnl in case --enable-static-libraries is given and we have to use static libs.

save_LIBS="${LIBS}" # avoid shared library dependancies.
LIBS=""

AC_CHECK_FUNC(gethostbyname,,
  AC_CHECK_LIB(nsl, gethostbyname, [
	
	# worked...
    	EXTRA_LIBS="-lnsl"

        # Solaris 2.5 needs this for nsl, so if it's there we'll link it in
	# if we're linking statically.  Otherwise things go wrong on some
	# systems where GNU versions of these libraries get used
	# unintentionally, and stuff doesn't compile.
	if test "$cmu_compile_with_static_libs" = yes ; then
          AC_CHECK_LIB(intl, dgettext, EXTRA_LIBS="${EXTRA_LIBS} -lintl",

	[

### begin macro

### this started out as
### AC_CHECK_LIB(/usr/lib/libintl.a, dgettext,
### EXTRA_LIBS="${EXTRA_LIBS} /usr/lib/libintl.a")
### but has been hacked so the first argument can be a full library name.


echo $ac_n "checking for dgettext in /usr/lib/libintl.a""... $ac_c" 1>&6
echo "configure:3351: checking for dgettext in /usr/lib/libintl.a" >&5
ac_lib_var=`echo /usr/lib/libintl.a'_'dgettext | sed 'y%./+-%__p_%'`
if eval "test \"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\" = set"; then
  echo $ac_n "(cached) $ac_c" 1>&6
else
  ac_save_LIBS="$LIBS"
LIBS="/usr/lib/libintl.a  $LIBS"
cat > conftest.$ac_ext <<EOF
#line 3359 "configure"
#include "confdefs.h"
/* Override any gcc2 internal prototype to avoid an error.  */
/* We use char because int might match the return type of a gcc2
    builtin and then its argument prototype would still apply.  */
char dgettext();

int main() {
dgettext()
; return 0; }
EOF
if { (eval echo configure:3370: \"$ac_link\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest; then
  rm -rf conftest*
  eval "ac_cv_lib_$ac_lib_var=yes"
else
  echo "configure: failed program was:" >&5
  cat conftest.$ac_ext >&5
  rm -rf conftest*
  eval "ac_cv_lib_$ac_lib_var=no"
fi
rm -f conftest*
LIBS="$ac_save_LIBS"

fi
if eval "test \"`echo '$ac_cv_lib_'$ac_lib_var`\" = yes"; then
  echo "$ac_t""yes" 1>&6
  EXTRA_LIBS="${EXTRA_LIBS} /usr/lib/libintl.a"
else
  echo "$ac_t""no" 1>&6
fi

### end macro

	])

	fi

	]))

AC_CHECK_FUNC(connect)
if test $ac_cv_func_connect = no; then
  AC_CHECK_LIB(socket, connect, EXTRA_LIBS="-lsocket $EXTRA_LIBS", ,
    $EXTRA_LIBS)
fi
LIBS="${save_LIBS} ${EXTRA_LIBS}"

dnl
dnl Try like crazy to locate Kerberos (4) libraries.
dnl This used to be easier, but with all the locations the BSD variants
dnl are using for Kerberos these days, + k5, it's harder.
dnl
dnl This might satisfy everyone, but I doubt it.  It should work if
dnl the code is in /usr/(athena|kerberos|local|.), it should detect if
dnl some include files are in a kerberosIV subdir, and it should work
dnl if there's a library called "krb4" instead of krb.  It should also
dnl correctly deal with crippled Kerberos libraries and refuse to use them,
dnl but only if the user doesn't specify --with-krb=no.
dnl
AC_ARG_WITH(krb,[  --with-krb=PATH         use Kerberos from PATH])
dnl This may not be the best way to do this, but I like it.
if test -z "${with_krb}" -o "${with_krb}" = yes; then
  AC_CACHE_CHECK(for location of Kerberos install, cyrus_krblocation, [

    # Check for Kerberos libraries in likely places.
    for checkloc in /usr/local /usr/kerberos /usr/athena /usr
    do
      libdir=${checkloc}/lib
      for checklib in ${libdir}/libkrb4.* ${libdir}/libkrb.*
      do
        if test -f ${checklib} ; then
          cyrus_krblocation=${checkloc}
          break
        fi
      done
      if test \! -z "${cyrus_krblocation}" ; then
        break
      fi
    done
    if test -z "${cyrus_krblocation}"; then
      cyrus_krblocation=no
    fi
    ])
else
  cyrus_krblocation="${with_krb}"
fi

if test "${with_krb}" != no ; then
  if test -z "${cyrus_krblocation}" ; then
    if -a "${with_krb}" = yes; then
     AC_MSG_ERROR([Couldn't find Kerberos.  Use --with-krb to specify a path.])
    else
      with_krb=no
    fi
  else
    with_krb=${cyrus_krblocation}
  fi
fi

case "$with_krb" in
  no) true;;
  *)
    CMU_ADD_LIBPATH(${with_krb}/lib)

    dnl Kerberos wants this so we might as well check on it first
    AC_CHECK_FUNC(res_search,,AC_CHECK_LIB(resolv,res_search))

    dnl gotta do this: crypt is used by sasl_krb_server.c
    AC_CHECK_FUNC(crypt,,AC_CHECK_LIB(crypt, crypt))

    AC_CHECK_LIB(des,des_ecb_encrypt, LIBS="${LIBS} -ldes",
 AC_MSG_ERROR([The Kerberos DES library is required for Kerberos support.]))
      
    dnl We've replaced your regular Kerberos libraries with K5 compatibility
    dnl versions.  Let's see if configure can tell the difference.
    dnl on second thought, let's not do that just until we can be
    dnl sure what we're doing.
    AC_CHECK_LIB(krb, krb_get_phost,,
     AC_MSG_ERROR([Can't find Kerberos libraries!]))

    AC_CACHE_CHECK(for Kerberos includes, cyrus_krbinclude, [
      # I know I"m going to get bug reports about this because someone
      # cleverly hid the Kerberos includes somewhere.  Oh, well.
      for krbhloc in include/kerberosIV include
      do
	if test -f ${with_krb}/${krbhloc}/krb.h ; then
	  cyrus_krbinclude=${with_krb}/${krbhloc}
	  break
	fi
      done
      ])
    if test -z "${cyrus_krbinclude}"; then
      AC_MSG_ERROR([Can't find Kerberos include files.])
    fi

    CPPFLAGS="${CPPFLAGS} -I${cyrus_krbinclude}"

    AC_CHECK_FUNC(basename,,AC_CHECK_LIB(iberty,basename))
    AC_DEFINE(HAVE_KRB)
    ;;
esac

dnl
dnl Test for OpenSSL
dnl
AC_ARG_WITH(with-openssl,[  --with-openssl=PATH      use OpenSSL from PATH],
	with_openssl="${withval}")

case "$with_openssl" in
	no) with_openssl="no";;
	""|yes) 
	  dnl if openssl has been compiled with the rsaref2 libraries,
	  dnl we need to include the rsaref libraries in the crypto check
                LIB_RSAREF=""
	        AC_CHECK_LIB(rsaref, RSAPublicEncrypt,
		       LIB_RSAREF="-lRSAglue -lrsaref"; cmu_have_rsaref=yes,
		       cmu_have_rsaref=no)

		with_openssl="yes"
		AC_CHECK_LIB(crypto,BIO_accept,
                                    LIBS="-lcrypto $LIB_RSAREF ${LIBS}",
		                    with_openssl="no", $LIB_RSAREF)
		AC_CHECK_LIB(ssl, SSL_CTX_new, LIBS="-lssl ${LIBS}",
		             with_openssl="no", -lcrypto $LIB_RSAREF)
		
		;;
	*)  CPPFLAGS="${CPPFLAGS} -I${with_openssl}/include"
	    LIBS="${LIBS} -lssl -lcrypto";;
esac

AC_MSG_CHECKING(for openssl)
AC_MSG_RESULT($with_openssl)

if test "$with_openssl" != "no"; then
	AC_DEFINE(HAVE_SSL)
fi

dnl
dnl Test for Zephyr
dnl
AC_ARG_WITH(zephyr,[  --with-zephyr=PATH      use Zephyr from PATH],
	with_zephyr="${withval}")
if test -z "$with_zephyr"; then
     if test -f /usr/local/lib/libzephyr.a; then
	with_zephyr="/usr/local"
     fi
fi
case "$with_zephyr" in
	no) true;;
	""|yes) AC_CHECK_LIB(zephyr,ZInitialize,LIBS=" -lzephyr ${LIBS}",
		with_zephyr="no",);;
	*)  CPPFLAGS="${CPPFLAGS} -I${with_zephyr}/include"
	    LIBS="-lzephyr ${LIBS}";;
esac
AC_ARG_WITH(notify,[  --with-notify=METHOD    use mail notification METHOD
                          METHOD is zephyr or no],WITH_NOTIFY="${withval}",
	if test "$with_zephyr" = "no"; then
		WITH_NOTIFY=no
	else
		WITH_NOTIFY=zephyr
	fi)
AC_SUBST(WITH_NOTIFY)
if test "$with_zephyr" = "no"; then
     if test "$WITH_NOTIFY" = "zephyr"; then
	AC_MSG_ERROR(Unable to find Zephyr libraries)
     fi
fi     

dnl
dnl Try and find a system version of com_err.
dnl If we see something that looks a little wacky, ignore it (there are many
dnl deficient installs of com_err, unfortunately, which leave out compile_et)
dnl
AC_ARG_WITH(com_err,
[  --with-com_err=PATH     use com_err from path -- includes in PATH/include,
                          libs in PATH/lib, and compile_et in PATH/bin])
if test -z "$with_com_err"; then
	# no value supplied
	AC_CHECK_LIB(com_err, com_err, [
		# com_err is already in library path
		# guess we're okay
		# can use system com_err
		with_com_err=""
		AC_PATH_PROG(COMPILE_ET, compile_et, [no compile et])
	], [
	if test -f /usr/local/include/com_err.h; then
		with_com_err="/usr/local"
		AC_PATH_PROG(COMPILE_ET, /usr/local/bin/compile_et, [no compile et])
	else
		# use ours
		with_com_err=yes
	fi
	])

	if test "${with_com_err}" = "no"; then
	  AC_MSG_WARN([com_err is required; included version will be used.])
	  with_com_err="yes"
	fi
	if test "${COMPILE_ET}" = "no compile et" -o "${COMPILE_ET}" = ""; then
	  AC_MSG_WARN([Parts of com_err distribuion were found, but not compile_et.])
	  AC_MSG_WARN([Will build com_err from included sources.])
	  with_com_err="yes" # build it ourselves
	fi
fi

case "$with_com_err" in
  # built-in et
  yes) # use the com_err we're gonna build
	  COM_ERR_LIBS="../et/libcom_err.a"
	  COMPILE_ET="../et/compile_et"
	  COM_ERR_LDFLAGS=""
	  COM_ERR_CPPFLAGS=[-I${srcdir}/../et]
	  PRE_SUBDIRS="et ${PRE_SUBDIRS}"
	  EXTRA_OUTPUT="${EXTRA_OUTPUT} et/Makefile"
	  ;;
  "")   # no problem, we already have it in the paths
	# we do nothing to pick it up
	COM_ERR_LIBS="-lcom_err" # hope it's not shared
	# we already set COMPILE_ET, or we didn't get here
	COM_ERR_LDFLAGS=""
	COM_ERR_CPPFLAGS=""
      ;;
  *) # use whatever they told us, or whatever we found
     COMPILE_ET="${with_com_err}/bin/compile_et"
     COM_ERR_LIBS="${with_com_err}/lib/libcom_err.a"
     COM_ERR_CPPFLAGS="-I${with_com_err}/include"
     # Ever get the feeling people hide this stuff on purpose?
     if test -d "${with_com_err}/include/et" ; then
       COM_ERR_CPPFLAGS="-I${with_com_err}/include"
     fi
dnl     CMU_ADD_LIBPATH_TO(${with_com_err}/lib, COM_ERR_LDFLAGS)
     COMPILE_ET="${with_com_err}/bin/compile_et"
esac
AC_SUBST(COMPILE_ET)
AC_SUBST(COM_ERR_LIBS)
AC_SUBST(COM_ERR_LDFLAGS)
AC_SUBST(COM_ERR_CPPFLAGS)

dnl
dnl Look for inn
dnl
AC_ARG_WITH(inn,[  --with-inn=PATH         use INN from PATH],
	innpath="$withval")
AC_MSG_CHECKING(for inn)
if test -f ${innpath}/innshellvars; then
	INNSHELLVARS=${innpath}/innshellvars
elif test -f ${innpath}/lib/innshellvars; then
	INNSHELLVARS=${innpath}/lib/innshellvars
elif test -f /usr/local/news/innshellvars; then
	INNSHELLVARS=/usr/local/news/innshellvars
elif test -f /usr/lib/news/innshellvars; then
	INNSHELLVARS=/usr/lib/news/innshellvars
elif test -f /usr/news/lib/innshellvars; then
	INNSHELLVARS=/usr/news/lib/innshellvars
elif test -f /usr/news/innshellvars; then
	INNSHELLVARS=/usr/news/innshellvars
else
	INNSHELLVARS=no
fi
AC_MSG_RESULT($INNSHELLVARS)

AC_SUBST(INNSHELLVARS)

AC_ARG_ENABLE(privacy,
	[  --disable-privacy       disable network privacy support],
	if test "$enableval" = no; then
		AC_DEFINE(NOPRIVACY)
	fi)		

AC_MSG_CHECKING(for modern syslog)
AC_CACHE_VAL(cyrus_cv_lib_syslog, AC_TRY_CPP([#include <syslog.h>
#ifndef LOG_LOCAL6
#include </nonexistent>
#endif],cyrus_cv_lib_syslog=yes,cyrus_cv_lib_syslog=no))
if test $cyrus_cv_lib_syslog = no; then
	PRE_SUBDIRS="${PRE_SUBDIRS} syslog"
	EXTRA_OUTPUT="${EXTRA_OUTPUT} syslog/Makefile"
	DEPLIBS="${DEPLIBS} ../syslog/libsyslog.a"
	CPPFLAGS="$CPPFLAGS -I\$(srcdir)/../syslog"
fi
AC_MSG_RESULT($cyrus_cv_lib_syslog)

AC_ARG_ENABLE(amssync,
	[  --enable-amssync        enable AMS bboard sync support],
	if test "$enableval" = yes; then
		EXTRA_SUBDIRS="${EXTRA_SUBDIRS} amssync"
		EXTRA_OUTPUT="${EXTRA_OUTPUT} amssync/Makefile"
# strchr in ossup?
#		AC_CHECK_LIB(ossup, strchr, LIBS="${LIBS} -lossup")
	fi)			
dnl Have to check getdtabalesize after adding ossup, as some ossups define it
AC_REPLACE_FUNCS(getdtablesize)
AC_ARG_ENABLE(cmulocal,
	[  --enable-cmulocal       enable CMU-specific local support],
	if test "$enableval" = yes; then
		EXTRA_SUBDIRS="${EXTRA_SUBDIRS} depot"
		EXTRA_OUTPUT="${EXTRA_OUTPUT} depot/Makefile"
	fi)			
STRIP="-s"
AC_ARG_ENABLE(debug,
[  --enable-debug          do not strip binaries on the install],
	if test "$enableval" = yes; then
		STRIP=""
	fi)
AC_SUBST(STRIP)
AC_ARG_ENABLE(experiment,
	[  --enable-experiment     enable experimental code (gurus only)],
	if test "$enableval" = yes; then
		AC_DEFINE(ENABLE_EXPERIMENT)
	fi)			
AC_ARG_ENABLE(netscapehack,
	[  --enable-netscapehack   enable Netscape hack for the menu option
                          in Communicator to Administrate Mail],
	if test "$enableval" = yes; then
		AC_DEFINE(ENABLE_X_NETSCAPE_HACK)
	fi)

AC_CHECK_FUNC(dlopen,,AC_CHECK_LIB(dl,dlopen))
CMU_SASL

AC_DEFUN(CMU_STATICALLY_LINK_WHAT_YOU_CAN, [

libraries=$1
cflags=$2
ldflags=$3

outlibs=""

# Where did IRIX hide the libraries?
default_ldflags="-L/usr/lib"
for flag in ${cflags} ; do
  case $flag in
    -n32) default_ldflags="-L/usr/lib32"
	  ;;
    -n64) default_ldflags="-L/usr/lib64"
	  ;;
    *) true
       ;;
  esac
done

# Figure out what directories we're linking against.
# Lots of fun for the whole family.
# This probably chokes on anything with spaces in it.
# All we want is the list of -L directories, and -L may or may not be
# followed by a space.
isdir=no
libpath=""
#echo "debug ldflags: << ${ldflags} >>"
#echo "debug default_ldflags: << ${default_ldflags} >>"
for flag in ${ldflags} ${default_ldflags}; do
  case $flag in
    -L)
      # it's a split -L option, we'll mark the next option as a dir.
      isdir=yes
      ;;

    -L*) 
      # attached -L option: split off the directory
      larg=`echo $flag | sed -e 's:-L\(..*\):\1:'`
      libpath="${libpath} ${larg}"
      ;;

    *)
      if test $isdir = yes ; then
	libpath="${libpath} ${flag}"
	isdir=no
      fi
  esac
done
#echo "debug libpath: << $libpath >>"

#echo "debug libraries: $libraries"

for lib in $libraries ; do
  # aieeeee
  libmatches=`echo ${lib} | sed -e 's:^-l.*$:/:'`
  libfilename=`echo ${lib}.a | sed -e 's/^-l/lib/'`

  #echo -n "debug looking at $lib ($libmatches) ($libfilename)..."

  if test "$libmatches" = "/" ; then
    #echo "searching [$libpath]"
    found=""
    for libdir in $libpath ; do
      if test -z "$found"; then
        # See if a static version of the library exists.
	#echo -n "checking for ${libdir}/${libfilename}... "
        if test -f ${libdir}/${libfilename}; then
 	  #echo "yes"
	  found="${libdir}/${libfilename}"
        else
	  #echo "no"
	  true
        fi
      fi
    done
  else 
    found="$lib"
  fi
      
  # Sanity check this library: XXX

  if test "${found}" != "" ; then
    lib="$found"
  fi
  
  outlibs="${outlibs} ${lib}"

done

# canonicalize excess whitespace: all spaces/tabs become one single space
outlibs=`echo $outlibs | sed -e 's/[ 	][ 	]*/ /g'`

STATIC_LIBS="$outlibs"
])

### staticify

IMAP_COM_ERR_LIBS="${COM_ERR_LIBS}"
IMAP_LIBS="${LIB_SASL} ${LIBS}"

if test "$cmu_compile_with_static_libs" = yes ; then

  AC_MSG_CHECKING(which libraries can be statically linked)

  CMU_STATICALLY_LINK_WHAT_YOU_CAN("$LIBS", "$CFLAGS", "$LDFLAGS")
  IMAP_LIBS="$STATIC_LIBS"

  CMU_STATICALLY_LINK_WHAT_YOU_CAN("$COM_ERR_LIBS",
	"$CFLAGS", "$LDFLAGS $COM_ERR_LDFLAGS")
  IMAP_COM_ERR_LIBS="$STATIC_LIBS"

  AC_MSG_RESULT(ok)

fi

AC_SUBST(IMAP_COM_ERR_LIBS)
AC_SUBST(IMAP_LIBS)

AC_OUTPUT(Makefile man/Makefile lib/Makefile acap/Makefile imap/Makefile imap/feedcyrus imtest/Makefile $EXTRA_OUTPUT)
